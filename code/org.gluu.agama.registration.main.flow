// User Registration Techniques
Flow org.gluu.agama.registration.main
     Basepath ""
     Timeout 700 seconds
     Configs conf
// Create  variable for UI feedback
uiFeedback = {}
uiFeedback.errorMessage = ""
emailObj = {}
sendMail = true
uiInput = {matches: true, resent: false}
// Iterate x times max
Repeat 6 times max
     // Retrieve user profile  from UI
     userInput = RRF "profile.ftlh" uiFeedback
     // create an instance of Registration service
     userRegistrationService = Call org.gluu.agama.user.UserRegistration#getInstance conf
     // Assign userName, email and password  to a variable
     email = userInput.mail
     userName = userInput.uid
     referralCode = userInput.referralCode
     country = userInput.country
     phone = userInput.phoneNumber
     // sent sms otp
     smsOtpSend = Call userRegistrationService sendOTPCode phone
     // The OTP Code has been send to user.
     Log "@info OTP generated and send to: " phone
     otpValidationResult = false
     max = Repeat 3 times max
          //  Show UI to collect OTP code from user.
          otpCreds = RRF "smsOtp.ftlh" uiFeedback
          //  Add log entry with collected code in log file.
          Log "@info Information provided by the user is : " otpCreds.code
          //  Validate the OTP code provided by the user.
          otpValidationResult = Call userRegistrationService validateOTPCode phone otpCreds.code
          // Add log entry withvalidation result in log file.
          Log "@info OTP validation result is:" otpValidationResult
          Quit When otpValidationResult is true
          // The maximum number of attempt has been reached.
          Log "@error Invalid code provided "
          // Provide feedback to user.
          uiFeedback.errorMessage = "Invalid code provided."
     Log "@info OTP verification loop completed"
     isPhoneVerified = otpValidationResult
     // Check if OTP validation vas okay
     When isPhoneVerified is true
          uiFeedback.errorMessage = null
          // check user name policy
          isUsernamePolicyMatch = Call userRegistrationService usernamePolicyMatch userName
          // if username policy match
          When isUsernamePolicyMatch is true
               // Check user already exist or not with mail
               user = Call userRegistrationService getUserEntityByMail email
               // If user not found
               When user.empty is true
                    // Check user already exist or not with username
                    userWithUid = Call userRegistrationService getUserEntityByUsername userName
                    // user not found
                    When userWithUid.empty is true
                         // Retrieve user password from UI
                         passwordInput = RRF "password.ftlh" uiFeedback
                         // Assign  password  to a variable
                         userPassword = passwordInput.userPassword
                         confirmPassword = passwordInput.confirmPassword
                         // Password policy check
                         isPasswordPolicyMatch = Call userRegistrationService passwordPolicyMatch userPassword
                         // if password policy match
                         When isPasswordPolicyMatch is true
                              // Matching password 
                              When userPassword is confirmPassword
                                   Log "@info Send-Email-page-trigger"
                                   // Call email service to send mail
                                   otpCode = Call userRegistrationService sendEmail email
                                   // Send Email Otp method called
                                   Log "@info Send Email Otp method called"
                                   // When OTP code null
                                   When otpCode is null
                                        // Variable assignment for unsuccessful Email delivery
                                        emailObj = { success: false, error: "Unable_to_deliver_email_message" }
                                        uiFeedback.errorMessage = "Unable to send OTP to the provided email address"
                                        Finish emailObj
                                   emailVerificationSuccess = false
                                   // Iterate x times max
                                   otpTries = Repeat 3 times max
                                        // Variable assignment after successful email delivery
                                        emailObj.email = email
                                        emailObj.matches = uiInput.matches
                                        emailObj.resent = uiInput.resent
                                        // Redirect to page asking for OTP received using email
                                        uiInput = RRF "emailOtp.ftlh" emailObj
                                        // When passcode entered by user matches
                                        When uiInput.passcode is otpCode
                                             emailVerificationSuccess = true
                                        Otherwise
                                             // Variable assigned when OTP entered by user does not matches
                                             uiInput.matches = false
                                             uiFeedback.errorMessage = "Incorrect OTP entered. Please try again."
                              Otherwise
                                   // Password and Confirm password doesn't match
                                   Log "@trace Password and Confirm password doesn't match"
                                   // Error variable assignment
                                   uiFeedback.errorMessage = "Password and confirm password not matching"
                         Otherwise
                              // password policy
                              uiFeedback.errorMessage = "Password must be at least 6 characters long and contain at least one special character"
                    Otherwise
                         // User already registered with UID
                         Log "@info User already registered with uid: %" userName
                         // User already registered with UID
                         uiFeedback.errorMessage = "User already registered with this UserName"
               Otherwise
                    // User already registered with mail
                    Log "@info User already registered with mail: %" email
                    // User already Registered
                    uiFeedback.errorMessage = "User already Registered with this mail"
          Otherwise
               // Name should contain only alphabets
               uiFeedback.errorMessage = "Name should contain only alphabets"
     Otherwise
          Log "@info OTP validation failed after 3 attempts"
          it_otpmax = { success: false, error: "ExceededTheNumberOfAttemptsAllowed" }
          Finish it_otpmax
// Maximum attempt reached
Log "@info Maximum attempt reached"
// User Registration flow failed
it_nfikg = {success:false, error: "User registration flow reached max attempts try later"}
Finish it_nfikg