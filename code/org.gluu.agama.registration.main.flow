// User Registration Techniques
Flow org.gluu.agama.registration.main
     Basepath ""
     Timeout 700 seconds
     Configs conf
// Create  variable for UI feedback
uiFeedback = {}
// Iterate x times max
Repeat 6 times max
     // Retrieve user profile  from UI
     userInput = RRF "profile.ftlh" uiFeedback
     // create an instance of Registration service
     userRegistrationService = Call org.gluu.agama.user.UserRegistration#getInstance conf
     // Assign userName, email and password  to a variable
     email = userInput.mail
     userName = userInput.uid
     referralCode = userInput.referralCode
     country = userInput.country
     phone = userInput.phoneNumber
     // sent sms otp
     smsOtpSend = Call userRegistrationService sendOTPCode phone
     // The OTP Code has been send to user.
     Log "@info OTP generated and send to: " phone
     Repeat 3 times max
          //  Show UI to collect OTP code from user.
          otpCreds = RRF "smsOtp.ftlh" uiFeedback
          //  Add log entry with collected code in log file.
          Log "@info Information provided by the user is : " otpCreds.code
          //  Validate the OTP code provided by the user.
          otpValidationResult = Call userRegistrationService validateOTPCode phone otpCreds.code
          // Add log entry withvalidation result in log file.
          Log "@info OTP validation result is:" otpValidationResult
          Quit When otpValidationResult is true
          // The maximum number of attempt has been reached.
          Log "@error Invalid code provided "
          // Provide feedback to user.
          uiFeedback.errorMessage = "You have exceeded the maximum number of OTP attempts. Please try again later."
          it_otpmax = { success: false, error: "ExceededTheNumberOfAttemptsAllowed" }
          Finish it_otpmax
     Log "@info OTP verification loop completed"
     isPhoneVerified = otpValidationResult
     // Check if OTP validation vas okay
     When isPhoneVerified is true
          // check user name policy
          isUsernamePolicyMatch = Call userRegistrationService usernamePolicyMatch userName
          // if username policy match
          When isUsernamePolicyMatch is true
               // Check user already exist or not with mail
               user = Call userRegistrationService getUserEntityByMail email
               // If user not found
               When user.empty is true
                    // Check user already exist or not with username
                    userWithUid = Call userRegistrationService getUserEntityByUsername userName
                    // user not found
                    When userWithUid.empty is true
                         // Retrieve user password from UI
                         passwordInput = RRF "password.ftlh" uiFeedback
                         // Assign  password  to a variable
                         userPassword = passwordInput.userPassword
                         confirmPassword = passwordInput.confirmPassword
                         // Password policy check
                         isPasswordPolicyMatch = Call userRegistrationService passwordPolicyMatch userPassword
                         // if password policy match
                         When isPasswordPolicyMatch is true
                              // Matching password 
                              When userPassword is confirmPassword
                                   Log "@info Send-Email-page-trigger"
                                   // Trigger sub-routine to verify email
                                   emailVerificationResult = Trigger org.gluu.agama.registration.emailVerification email
                                   // If email data is valid
                                   When emailVerificationResult.success is true
                                        // E-mail verification passed, initiating user provisioning flow
                                        Log "@info E-mail verification passed, initiating user provisioning flow"
                                        inum | E = Call userRegistrationService addNewUser userInput passwordInput
                                        // If user registration success
                                        When inum is not null
                                             // Show user creation log
                                             Log "@info User % has been created" inum
                                             // Show acknowledgement UI page for successful registration
                                             acknowledgementInput = RRF "acknowledgement.ftlh" 
                                             // Finish the flow successfully
                                             Log "@info Finish the flow successfully"
                                             // Finish the flow successfully
                                             Finish userName
                                        // Registration failed log
                                        Log "@info User registration failed. Error : %" E
                                   // When email verification is invalid
                                   When emailVerificationResult.success is false
                                        // Error variable assignment. 
                                        emailObj.errorMessage = "Error sending email. Check email address and SMTP configuration."
                              Otherwise
                                   // Password and Confirm password doesn't match
                                   Log "@trace Password and Confirm password doesn't match"
                                   // Error variable assignment
                                   uiFeedback.errorMessage = "Password and confirm password not matching"
                         Otherwise
                              // password policy
                              uiFeedback.errorMessage = "Password must be at least 6 characters long and contain at least one special character"
                    Otherwise
                         // User already registered with UID
                         Log "@info User already registered with uid: %" userName
                         // User already registered with UID
                         uiFeedback.errorMessage = "User already registered with this UserName"
               Otherwise
                    // User already registered with mail
                    Log "@info User already registered with mail: %" email
                    // User already Registered
                    uiFeedback.errorMessage = "User already Registered with this mail"
          Otherwise
               // Name should contain only alphabets
               uiFeedback.errorMessage = "Name should contain only alphabets"
     Otherwise
          // Closing the main flow with error.
          it_hmuwd = {success:false, error: "Registration flow exceeded maximum attempts"}
          Finish it_hmuwd
// Maximum attempt reached
Log "@info Maximum attempt reached"
// User Registration flow failed
it_lamur = {success:false, error: "User registration flow reached max attempts try later"}
Finish it_lamur